#!/bin/bash
#set -ex

if [ ! $1 ]  ; then
   echo "m2transport2: " 
   echo "This script will calculate transports across a section, but with a more"
   echo "fine-grained approach than m2transport. You will need to specify sections"
   echo "in the file sections.in. You will also have to define how to calculate"
   echo "transports in the file transports.in." 
   echo "Usage $(basename $0) [-nosec] file1 file2 ..., "
   echo "where optional argument: "
   echo "   -nosec            specifies that section positions don't need to be calculated"
   echo "                     again, convenient on multiple passes."
   exit 1
fi


#Assume programs are in the same dir as this routine
secprog=${0%m2transport2}/section_intersect
transprog=${0%m2transport2}/section_transport2


# Check for programs
[ ! -x $transprog  ]  && echo "Cant run/find program $transprog ..."    && exit
[ ! -x $secprog    ]  && echo "Cant run/find program $secprog   ..." && exit

# Check vital infiles
[ ! -s sections.in ] && echo "Cant find file sections.in" && exit
[ ! -s transport.in ] && echo "Cant find file transport.in" && exit


# -nosec argument specifies that we dont have to 
# calculate section positions again. Convenient on multiple passes
if [ "$1" == "-nosec" ] ; then
   shift
else
   for i in section[0-9][0-9][0-9].dat transport[0-9][0-9][0-9].dat ; do
      [ -r $i ] && rm $i
   done
   $secprog
   secres=$?
   [ $secres -ne 0 ] && { echo "Section program failed " ; exit $secres ;  }
fi
[ ! $1 ] && echo " Usage: $0 [-nosec] <files> " && exit



append=""
while [ $1 ] ; do
   $transprog $1 $append
   transres=$?
   [ $transres -ne 0 ] && { echo "Section program failed " ; exit $transres ;  }
   append="-append"
   shift
done
